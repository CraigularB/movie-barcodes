{"name":"Movie Barcodes","tagline":"Turn video files into 'barcodes' where vertical lines represent the average colour of individual frames.","body":"# Movie Barcode Generator\r\n![github-bighero6](https://cloud.githubusercontent.com/assets/1192790/11238640/1f7ea5ac-8e3b-11e5-8c2b-e00758b1ec19.png)\r\n\r\nTurn video files into 'barcodes' where vertical lines represent the average colour of individual frames. [Example album.](http://imgur.com/gallery/Pw6LD/) Uses code [published by zulko](http://zulko.github.io/blog/2013/09/27/read-and-write-video-frames-in-python-using-ffmpeg/).\r\n\r\n**Requirements:**\r\n* [ffmpeg](https://www.ffmpeg.org/)\r\n* Python and [Python Imaging Library](http://www.pythonware.com/products/pil/)\r\n \r\n**Usage:**  \r\n    *python process_video.py inputfile width height*  \r\ne.g.  \r\n    *python process_video.py bigbuckbunny.mp4 320 180*\r\n\r\n**Tips:**\r\n* If it doesn't work on Windows, you might have to change FFMPEG_BIN from \"ffmpeg\" to \"ffmpeg.exe\"\r\n* Use low resolution videos! They provide identical results but are processed exponentially faster than high definition videos (I've seen above 1300fps). You're smearing all the details anyway.\r\n* By default, the resulting image will be as wide as the number of frames in the movie - probably several tens of thousands of pixels. However due to the nature of PNG files, it will only be a few hundred kilobytes! But you will need to use Photoshop or similar to format the images to your liking... or patch my code so the user can specify output size!\r\n \r\n**Details:**\r\n\r\nYou may have seen sites like [moviebarcode](http://moviebarcode.tumblr.com/), [The Colors of Motion](http://thecolorsofmotion.com/) or the [Movie Barcode Generator](http://arcanesanctum.net/movie-barcode-generator/). In short, they compress a movie into a single image, with vertical lines representing the average colours of sequential frames. Ideally this gives a glanceable idea of the movie's colour palette.\r\n\r\nWhile moviebarcode squashes each frame to a single pixel width (preserving some vertical gradients), this script uses a similar process to The Colors of Motion (a single colour per frame). First find the average RGB values of all pixels in a single frame:\r\n\r\n![github-process-1](https://cloud.githubusercontent.com/assets/1192790/11238530/715e0d1e-8e3a-11e5-9736-68f2e67d21fc.png)\r\n\r\nAnd then to repeat the process for all frames:\r\n\r\n![github-process-2](https://cloud.githubusercontent.com/assets/1192790/11238535/7664e6ac-8e3a-11e5-8989-6be607fa395e.png)\r\n\r\nThis should work with any movie file ffmpeg can handle (though in practice I've only tested it with mp4 files). \r\n\r\n(Images: [Big Buck Bunny](https://peach.blender.org/download/))\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}